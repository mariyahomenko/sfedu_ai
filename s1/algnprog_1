# Задачи для подготовки к контрольной работе № 1 (Ширяева Е.В.)
# Темы "Внутреннее представление целых чисел. 
# Операции над целыми числами. Вещественные числа. 
# Запись математических выражений. Форматированный вывод"

def decimal_1(x):   # перевод в десятичные
    if ',' in x:
        num, base = x.split(',')
        return int(num, int(base))
    else:
        return int(x)
# 1.1. Определите число, которое имеет в своей двоичной записи 
# наибольшее количество значащих нулей
nums_1_1 = ['2103,4', '25,8', '127', 'F2,16']
bin_1_1 = []    # двоичные записи
for num in nums_1_1:
    dec = decimal_1(num)
    binary = bin(dec)[2:]
    bin_1_1.append(binary)
max_zeros = -1  # -1 для первого вхождения в if count > max_zeros
answer_1_1 = ''
for i, b in enumerate(bin_1_1):
    count = b.count('0')
    if count > max_zeros:
        max_zeros = count   #присваиваем, так как проходимся по всем двоичным записям
        answer_1_1 = nums_1_1[i]
print('1.1. Наибольшее кол-во значащих нулей имеет число', answer_1_1.split(',')[0])
# 1.2. Какое из чисел не содержит в двоичной записи значащих нулей?
# Основание системы счисления указывать не нужно
answer_1_2 = ''
for i,b in enumerate(bin_1_1):
    if '0' not in b:
        answer_1_2 = nums_1_1[i]
print('1.2.Число', answer_1_2.split(',')[0], 'не содержит значащих нулей в двоичной записи')

# 2. Укажите количество чисел, 
# двоичная запись которых содержит ровно три значащих нуля
nums_2 = ['11,8', '12,16', '15', '17', '20,8', '25,16', '34,16', '42', '51,8']
count_2 = 0
for num in nums_2:
    num = decimal_1(num)
    binary = bin(num)[2:]
    zero = binary.count('0')
    if zero == 3:
        count_2 += 1
print('2. Кол-во чисел -', count_2)

#3. Сколько единиц содержит внутреннее представление отрицательного числа −67,
# если для хранения числа со знаком используется один байт?
def task_3_and_4(x,y):
    z = x
    count = ''  # двоичная запись числа
    while z != 0:
        count = str(z % 2) + count
        z = z // 2
    string = ('0' * (y - len(count))) + count   # 8 или 16 битов
    ans = ''
    for i in string:    # инвертируем
        if i == '0':
            ans += '1'
        else:
            ans += '0'
    return ans.count('1')+1 # т.к. числа всего 2, вручную заранее проверили, что они кончаются на 0
print('3.', task_3_and_4(67,8), 'единиц')
# 4. Сколько единиц  содержит внутреннее представление отрицательного числа −53,
# если для хранения числа со знаком используется два байта?
print('4.', task_3_and_4(53,16), 'единиц')

# 5. По двоичному коду восстановить десятичное отрицательное число
num_5 = int('11101111', 2)
if num_5 > 127: # диапазон положительных 8-битных чисел: 0-127
    num_5 -= 256    # 2^8
print('5.', num_5)

# 6. Определите результат работы программы.
# Запишите полное решение
a_6 = int('63',9)
b_6 = int('B5',12)
c_6 = int('450',6)
print('6.', 'oct (', a_6, '+', b_6, '-', c_6, ') =', oct(a_6 + b_6 - c_6)[2:])

# 7. Что будет в результате
x_7, y_7 = 17, 3
print('7.', divmod(x_7, y_7), divmod(-x_7, y_7), divmod(x_7, -y_7), divmod(-x_7, -y_7))

# 8. Что б удет в результате
x_8, y_8 = 18, -5
print('8.', divmod(x_8, y_8), divmod(-x_8, -y_8), divmod(x_8, -y_8), divmod(-x_8, y_8))

# 9. Определить результат
a_9 = 15
b_9 = 32
c_9 = (a_9 | b_9) + a_9 ^ b_9
d_9 = ~ a_9
print('9.', c_9, d_9) 

# 10. Определить результат
a_10 = 53
b_10 = 17
c_10 = a_10 >> 2 | b_10 << 2
print('10.', c_10)

# 11. Определить результат
a_11 = 4
b_11 = 23
c_11 = ~ a_11 + b_11 <<2
d_11 = c_11 ^ a_11
print('11.', c_11, d_11)

# 12. Результат
a_12 = 14
b_12 = 4
c_12 = a_12 & ~ b_12 ^ a_12
d_12 = c_12 >> 3
print('12.', c_12, d_12)

# 13. Результат
a_13 = 12
b_13 = -7
c_13 = a_13 | b_13 & a_13
d_13 = c_13 ^ b_13
print('13.', c_13, d_13)

# 14. Запишите 5 операторов присваивания для осуществления перестановки цифр 
# четырехзначного натурального числа a по правилу: a3a2a1a0 → a2a3a0a1, 
# где ai — цифры числа a (например, 3452 → 4325).
# Указание. Запишите 4 оператора присваивания для отделения каждой цифры числа 
# и 1 оператор присваивания для перестановки цифр
def task_14(x):
    x0 = x % 10 # четвертая цифра числа
    x1 = (x // 10) % 10
    x2 = (x // 100) % 10
    x3 = x // 1000  # первая цифра числа
    res = x2*1000 + x3*100 + x0*10 + x1
    if res == 4325:
        print('14. [x0 = x % 10] ' \
        '[x1 = (x // 10) % 10] ' \
        '[x2 = (x // 100) % 10] ' \
        '[x3 = x // 1000] ' \
        '[res = x2*1000 + x3*100 + x0*10 + x1]')
task_14(3452)

# 15. Запишите 4 оператора присваивания для осуществления перестановки цифр 
# четырехзначного целого числа a по правилу: a3a2a1a0 → a1a05a3a2, 
# где ai — цифры числа a (например, 1367 → 67513).
# Указание. Используйте не более 2 операторов присваивания для отделения нужных цифр числа 
# и 1 оператор присваивания для перестановки цифр
def task_15(x):
    x10 = x % 100
    x32 = x // 100
    a = (x10 // 10)*10000 + (x10 % 10)*1000 + 5*100 + (x32 // 10)*10 + (x32 % 10)
    if a == 67513:
        print('15. [x10 = x% 100] ' \
        '[x32 = x // 100] ' \
        '[a = (x10 // 10)*10000 + (x10 % 10)*1000 + 5*100 + (x32 // 10)*10 + (x32 % 10)]')
task_15(1367)
